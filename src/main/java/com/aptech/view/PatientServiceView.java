/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.aptech.view;

import com.aptech.db.DB;
import com.aptech.entity.InvoiceEntity;
import com.aptech.entity.MHISPatientHistory;
import com.aptech.entity.PatientServiceEntity;
import com.aptech.entity.RoomEntity;
import com.aptech.entity.ServiceEntity;
import com.aptech.utils.Const;
import com.aptech.utils.KeyNamePair;
import com.aptech.utils.Util;
import com.aptech.view.table.MyComboBoxModel;
import com.aptech.view.table.PatientServiceModel;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.JTableHeader;
import org.apache.commons.lang.ArrayUtils;

/**
 *
 * @author ducsang
 */
public class PatientServiceView extends javax.swing.JFrame {

    private static final Logger log = Logger.getLogger(PatientServiceView.class.getName());

    PatientServiceModel tableModel;
    int currentPage = 0;
    int totalPage = 0;
    private final int patientId;
    MHISPatientHistory ph;
    KeyNamePair[] services;
    MyComboBoxModel myComboBoxModel;
    KeyNamePair[] rooms;
    static DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd");

    /**
     * Creates new form ServicePatient
     */
    public PatientServiceView(int patientId) {
        this.patientId = patientId;
        initComponents();
        initTable();
        initComboBox();
        setField();

    }

    private void initComboBox() {
        for (KeyNamePair item : services) {
            jComboService.addItem(item);
        }

        for (KeyNamePair item : rooms) {
            jComboBoxRoom.addItem(item);
        }
    }

    private void setField() {
        ph = MHISPatientHistory.get(patientId);
        if (ph.getId() <= 0) {
            showMsg("INVALID PATIENT");
            return;
        }

        txtPatientId.setText(patientId + "");
        txtPatientName.setText(ph.getName());
        txtGender.setText(ph.getGender());
        txtBirthday.setText(ph.getBirthday().format(formatter));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtPatientId = new javax.swing.JTextField();
        txtPatientName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtBirthday = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtGender = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        jComboService = new javax.swing.JComboBox<>();
        jComboBoxRoom = new javax.swing.JComboBox<>();
        btnDelete = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        txtAmount = new javax.swing.JTextField();
        txtIsPaid = new javax.swing.JRadioButton();
        jlableMsg = new javax.swing.JLabel();
        btnUndo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        jLabelPage = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        jLabeTotal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel.setBackground(new java.awt.Color(232, 247, 248));
        jPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(4, 55, 249))); // NOI18N

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Patient ID");

        jLabel8.setText("Patient Name");

        txtPatientId.setEditable(false);
        txtPatientId.setForeground(new java.awt.Color(255, 0, 0));

        txtPatientName.setEditable(false);
        txtPatientName.setForeground(new java.awt.Color(255, 0, 0));

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Birthday");

        txtBirthday.setEditable(false);
        txtBirthday.setForeground(new java.awt.Color(255, 0, 0));

        jLabel10.setText("Gender");

        txtGender.setEditable(false);
        txtGender.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(24, 24, 24))
        );

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Patient Service ID");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Service Name");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Room");

        txtId.setEditable(false);

        btnSave.setBackground(new java.awt.Color(243, 242, 43));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/button-ok-icon.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveMouseClicked(evt);
            }
        });

        services = getKeyNamePairs(ServiceEntity.Table_Name);
        myComboBoxModel = new MyComboBoxModel(services);
        jComboService.setModel(myComboBoxModel);
        jComboService.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboServiceItemStateChanged(evt);
            }
        });
        jComboService.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboServiceMouseClicked(evt);
            }
        });

        rooms = getKeyNamePairs(RoomEntity.Table_Name);
        MyComboBoxModel roomModel = new MyComboBoxModel(rooms);
        jComboBoxRoom.setModel(roomModel);

        btnDelete.setBackground(new java.awt.Color(229, 138, 17));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Delete-icon.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnNew.setBackground(new java.awt.Color(15, 172, 244));
        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add-icon.png"))); // NOI18N
        btnNew.setText("New");
        btnNew.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNewMouseClicked(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Quantity");

        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQuantityKeyReleased(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Price");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Amount");

        txtPrice.setEditable(false);

        txtAmount.setEditable(false);
        txtAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAmountActionPerformed(evt);
            }
        });

        txtIsPaid.setText("IsPaid");
        txtIsPaid.setEnabled(false);

        btnUndo.setBackground(new java.awt.Color(219, 241, 244));
        btnUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Actions-edit-undo-icon.png"))); // NOI18N
        btnUndo.setText("Cancel");
        btnUndo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUndoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jComboService, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxRoom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtAmount, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUndo, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(txtIsPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jlableMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDelete, btnNew, btnSave});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jlableMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxRoom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtQuantity))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtIsPaid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNew)
                    .addComponent(btnSave)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUndo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnDelete, btnNew, btnSave});

        jScrollPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable.setSelectionBackground(new java.awt.Color(211, 248, 17));
        jTable.setSelectionForeground(new java.awt.Color(233, 18, 18));
        jTable.setShowGrid(true);
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
        });
        jTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable);

        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Skip-backward-icon.png"))); // NOI18N
        btnFirst.setFocusable(false);
        btnFirst.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFirst.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFirst.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnFirstMouseClicked(evt);
            }
        });
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        btnPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fast-backward-icon.png"))); // NOI18N
        btnPrev.setFocusable(false);
        btnPrev.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPrev.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPrev.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPrevMouseClicked(evt);
            }
        });

        jLabelPage.setForeground(new java.awt.Color(12, 134, 239));
        jLabelPage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Button-Fast-Forward-icon.png"))); // NOI18N
        btnNext.setFocusable(false);
        btnNext.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNext.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNextMouseClicked(evt);
            }
        });

        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Skip-forward-icon.png"))); // NOI18N
        btnLast.setFocusable(false);
        btnLast.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLast.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLast.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLastMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabeTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnFirst)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabelPage, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(btnNext)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLast))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelPage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabeTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNext)
                    .addComponent(btnLast))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPrev, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnFirst, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        PatientServiceEntity entity = getEntity(true);
        if (entity == null) {
            setErrorMsg();
            showMsg("NOT FOUND");
            return;
        }
        if (entity.isNew()) {
            setErrorMsg();
            showMsg("INVALID RECORD");
            return;
        }

        if (!entity.delete()) {
            setErrorMsg();
            showMsg("DELETE ERROR");
            return;
        }
        setSuccessMsg();
        clean();
        refreshTable();


    }//GEN-LAST:event_btnDeleteActionPerformed

    private void setSuccessMsg() {
        jlableMsg.setText("Successful!");
        jlableMsg.setForeground(Color.BLUE);

    }

    private void setErrorMsg() {
        jlableMsg.setText("DELETE ERROR!");
        jlableMsg.setForeground(Color.red);
    }
    private void txtAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAmountActionPerformed

    private void btnFirstMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFirstMouseClicked
        loadData(1);
    }//GEN-LAST:event_btnFirstMouseClicked

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPrevMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPrevMouseClicked
        if (currentPage > 1) {
            loadData(--currentPage);
        }
    }//GEN-LAST:event_btnPrevMouseClicked

    private void btnNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNextMouseClicked
        loadData(++currentPage);
    }//GEN-LAST:event_btnNextMouseClicked

    private void btnLastMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLastMouseClicked
        loadData(totalPage);
    }//GEN-LAST:event_btnLastMouseClicked

    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked
        PatientServiceEntity entity = getEntity(false);
        if (entity == null) {
            setErrorMsg();
            showMsg("NOT FOUND");
            return;
        }
        boolean isNew = txtId.getText() == null || txtId.getText().isEmpty();
        if (!entity.save()) {
            setErrorMsg();
            showMsg("SAVE ERROR!");
            log.warning("SAVE ERROR!");
            return;
        }
        if (isNew) {
            txtId.setText("" + entity.getId());
        }
        InvoiceEntity iv = InvoiceEntity.getByPatient(entity.getPatientId(), false);
        if(iv != null && !iv.recalculate()){
            showMsg("NOT CALCULATE INVOICE!");
            return;
        }
       
        setSuccessMsg();
        showMsg("Success");
        log.warning("Save Success!");
        refreshTable();
    }//GEN-LAST:event_btnSaveMouseClicked

    private void btnNewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNewMouseClicked
        clean();
    }//GEN-LAST:event_btnNewMouseClicked

    private void txtQuantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyReleased
        if (!calcalateAmout()) {
            return;
        }
    }//GEN-LAST:event_txtQuantityKeyReleased

    private void jComboServiceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboServiceMouseClicked
        if (!calcalateAmout()) {
            return;
        }
    }//GEN-LAST:event_jComboServiceMouseClicked

    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
        getDetail();
    }//GEN-LAST:event_jTableMouseClicked

    private void jTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            getDetail();
        }
    }//GEN-LAST:event_jTableKeyReleased

    private void jComboServiceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboServiceItemStateChanged
        if(!calcalateAmout()){
            return;
        }
    }//GEN-LAST:event_jComboServiceItemStateChanged

    private void btnUndoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUndoMouseClicked
        if(txtId.getText() != null && txtId.getText().length() != 0){
            getDetail();
        }else{
            clean();
        }
    }//GEN-LAST:event_btnUndoMouseClicked

    private boolean calcalateAmout() {
        if (txtQuantity.getText() == null || txtQuantity.getText().isEmpty()) {
            return false;
        }

        if (!Util.isNumeric(txtQuantity.getText())) {
            showMsg("Invalid Quantity");
            return false;
        }
        BigDecimal quantity = new BigDecimal(txtQuantity.getText());
        KeyNamePair item = (KeyNamePair) jComboService.getModel().getSelectedItem();
        if (item == null) {
            return false;
        }

        ServiceEntity service = ServiceEntity.get(item.getKey());
        if (service == null || service.getId() <= 0) {
            return false;
        }

        BigDecimal amount = quantity.multiply(service.getUnitPrice());
        txtAmount.setText(String.valueOf(amount));
        txtPrice.setText(String.valueOf(service.getUnitPrice()));
        return true;
    }

    private PatientServiceEntity getEntity(boolean isDelete) {
        boolean isNew = txtId.getText() == null || txtId.getText().isEmpty();
        PatientServiceEntity entity = new PatientServiceEntity();
        entity.setId(isNew ? -1 : Integer.parseInt(txtId.getText()));
        KeyNamePair servicePair = (KeyNamePair) jComboService.getModel().getSelectedItem();
        entity.setServiceId(Integer.parseInt(servicePair.getID()));
        KeyNamePair roomPair = (KeyNamePair) jComboBoxRoom.getModel().getSelectedItem();
        entity.setRoomId(Integer.parseInt(roomPair.getID()));
        entity.setQuantity(new BigDecimal(txtQuantity.getText()));
        entity.setPatientId(patientId);
        if (!isDelete && !entity.validateBeforeSave(isNew)) {
            showMsg("INVALID RECORD!");
            return null;
        }
        return entity;
    }

    private void refreshTable() {
        loadData(currentPage);
    }

    private void getDetail() {
        int row = jTable.getSelectedRow();
        int cloum = jTable.getColumnCount();
        for (int i = 0; i < cloum; i++) {
            Object value = tableModel.getValueAt(row, i);
            String headerName = jTable.getColumnName(i);
            if (PatientServiceEntity.COLUMNNAME_HIS_Patient_Serivce_ID.equalsIgnoreCase(headerName)) {
                txtId.setText(String.valueOf(value));
            } else if (PatientServiceEntity.COLUMNNAME_HIS_Service_ID.equalsIgnoreCase(headerName)) {
                jComboService.setSelectedItem(getItem(services, (int)value));
            } else if (PatientServiceEntity.COLUMNNAME_HIS_Room_ID.equalsIgnoreCase(headerName)) {
                jComboBoxRoom.setSelectedItem(getItem(rooms, (int)value));
            } else if (PatientServiceEntity.COLUMNNAME_Quantity.equalsIgnoreCase(headerName)) {
                txtQuantity.setText(value.toString());
            } else if (PatientServiceEntity.COLUMNNAME_Amount.equalsIgnoreCase(headerName)) {
                if (value != null) {
                    txtAmount.setText(value.toString());
                }
            } else if (PatientServiceEntity.COLUMNNAME_UnitPrice.equalsIgnoreCase(headerName)) {
                if (value != null) {
                    txtPrice.setText(value.toString());
                }
            } else if (PatientServiceEntity.COLUMNNAME_IsPaid.equalsIgnoreCase(headerName)) {
                txtIsPaid.setSelected("Y".equals(value.toString()));
            }
        }
    }

    private void initTable() {
        tableModel = new PatientServiceModel();
        jTable.setModel(tableModel);
        JTableHeader header = jTable.getTableHeader();
        header.setBackground(Color.black);
        header.setForeground(Color.BLUE);
        loadData(1);
    }

    private void calculatePage() {
        int totalRow = getTotalRow();
        int numRows = Const.NUMBER_ROW;
        if (totalRow % numRows == 0) {
            totalPage = totalRow / numRows;
        } else {
            totalPage = totalRow / numRows + 1;
        }
        jLabeTotal.setText(totalRow + " rows");
    }

    private int getTotalRow() {
        String sql = "SELECT count(*) FROM " + PatientServiceEntity.Table_Name + " WHERE IsDeleted = 'N'";
        return DB.getSQLValueEx(sql, null);
    }

    private void loadData(int page) {
        log.warning("Start loadData");
        currentPage = page;
        calculatePage();
        jLabelPage.setText(currentPage + "/" + totalPage);
        int rows = Const.NUMBER_ROW;
        int offset = (page - 1) * rows;
        btnFirst.setEnabled(currentPage > 1);
        btnPrev.setEnabled(currentPage > 1);
        btnNext.setEnabled(currentPage != totalPage);
        btnLast.setEnabled(currentPage != totalPage);
        tableModel.getDataVector().removeAllElements();
        String sql = "SELECT s.HIS_Patient_Service_ID, s.HIS_Service_ID, hs.Name as ServiceName, s.Quantity, hs.UnitPrice,"
                + " s.TotalPrice, s.Amount, s.HIS_Room_ID, hr.Name as Room, s.DocDate, s.ActDate"
                + " FROM HIS_Patient_Service s"
                + " INNER JOIN HIS_Service hs on s.HIS_Service_ID = hs.HIS_Service_ID"
                + " LEFT JOIN HIS_Room hr on hr.HIS_Room_ID = s.HIS_Room_ID"
                + " WHERE s.IsDeleted = 'N' AND s.HIS_PatientHistory_ID = " + patientId
                + " ORDER BY s.HIS_Patient_Service_ID";
        log.warning(sql);
        PreparedStatement ptsm = null;
        ResultSet rs = null;
        try {
            ptsm = DB.prepareStatement(sql);
            rs = ptsm.executeQuery();
            while (rs.next()) {
                Vector v = new Vector();
                v.add(rs.getInt("HIS_Patient_Service_ID"));
                v.add(rs.getInt("HIS_Service_ID"));
                v.add(rs.getString("ServiceName"));
                v.add(rs.getBigDecimal("Quantity"));
                v.add(rs.getBigDecimal("UnitPrice"));
                v.add(rs.getBigDecimal("TotalPrice"));
                v.add(rs.getBigDecimal("Amount"));
                v.add(rs.getInt("HIS_Room_ID"));
                v.add(rs.getString("Room"));
                v.add(rs.getTimestamp("DocDate"));
                v.add(rs.getTimestamp("ActDate"));
                tableModel.addRow(v);
            }
        } catch (SQLException e) {
            log.warning("ERROR " + e.getMessage());
        } finally {
            DB.close(rs, ptsm);
            rs = null;
            ptsm = null;
        }
        hidenColumn("HIS_Service_ID");
        hidenColumn("HIS_Room_ID");
        log.warning("End loadData");
        if (tableModel.getDataVector() != null && tableModel.getDataVector().size() > 0) {
            jTable.setRowSelectionInterval(0, 0);
            getDetail();
        }
    }

    private void hidenColumn(String identifer) {
        jTable.getColumn(identifer).setMinWidth(0);
        jTable.getColumn(identifer).setMaxWidth(0);
        jTable.getColumn(identifer).setWidth(0);
    }

    private void clean() {
        txtId.setText("");
        jComboService.setSelectedIndex(-1);
        jComboBoxRoom.setSelectedIndex(-1);
        txtQuantity.setText("1");
        txtPrice.setText("");
        txtAmount.setText("");
        txtIsPaid.setSelected(false);
    }

    private void showMsg(String msg) {
        JOptionPane.showMessageDialog(this, msg);
    }

    private KeyNamePair[] getKeyNamePairs(String tableName) {
        final JComboBox cbox = new JComboBox();
        List<KeyNamePair> list = new ArrayList<>();
        String sql = "SELECT " + tableName + "_ID, Name FROM " + tableName + " WHERE IsDeleted = 'N' AND IsActive = 'Y'";
        PreparedStatement pstm = null;
        ResultSet rs = null;
        try {
            pstm = DB.prepareStatement(sql);
            rs = pstm.executeQuery();
            while (rs.next()) {
                int id = rs.getInt(1);
                String name = rs.getString(2);
                KeyNamePair p = new KeyNamePair(id, name);
                list.add(p);
            }
        } catch (Exception e) {
        } finally {
            DB.close(rs, pstm);
            rs = null;
            pstm = null;
        }

        KeyNamePair[] items = new KeyNamePair[list.size()];
        return list.toArray(items);
    }
    
    private KeyNamePair getItem(KeyNamePair[] items, int key){
        for(KeyNamePair item : items){
            if(item.getKey() == key){
                return item;
            }
        }
        return null;
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUndo;
    private javax.swing.JComboBox<KeyNamePair> jComboBoxRoom;
    private javax.swing.JComboBox<KeyNamePair> jComboService;
    private javax.swing.JLabel jLabeTotal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelPage;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    private javax.swing.JLabel jlableMsg;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtBirthday;
    private javax.swing.JTextField txtGender;
    private javax.swing.JTextField txtId;
    private javax.swing.JRadioButton txtIsPaid;
    private javax.swing.JTextField txtPatientId;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
